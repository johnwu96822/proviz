<soft-viz>
  <!-- any number of viz-def tags that can be referenced by id -->
  <viz-def id="int" vc="test.viz.Int"/>
  <viz-def id="float" vc="test.viz.Float"/>
  <!-- any number of topmost type tags -->
  <type name="test.Demo">
    <!-- any number of visualization classes for the type, 
         the first one is considered default, user can select others
         if there is only one, it can be specified directly as an 
         attribute to type tag  -->
    <viz vc="test.viz.Test"/>
    <!-- any number of field tags, each must correspond to a field 
         within the enclosing type -->
    <field name="field">
      <!-- any number of visualization classes for the field, 
           the first one is considered default, user can select others
           if there is only one, it can be specified directly as an 
           attribute to field tag  -->
      <viz vc = "test.viz.Int"/>
    </field>
    <method name="methodWithOneParameterOneVariable">
      <!-- any number of visualization classes for the method, 
           the first one is considered default, user can select others
           if there is only one, it can be specified directly as an 
           attribute to method tag  -->
      <viz vc="test.viz.Method"/>
      <!-- any number of var tags, each must correspond to a parameter 
           within the signature of the enclosing method or to a local 
           variable; note that we don't distinguish (yet) among variables 
           with the same name declared in different code blocks -->
      <var name="i">
      	<viz ref="int"/>
      </var>
      <param name="param" type="double">
        <!-- any number of visualization classes for the parameter or 
             local variable, the first one is considered default, 
             user can select others, if there is only one, it can be 
             specified directly as an attribute to var tag  -->
        <viz vc="test.viz.Float"/>
        <viz ref="int"/>
      </param>
    </method>
   <!-- example of direct specification of default visualization class
         as an attribute to a method tag  -->
    <method name="methodWithTwoParametersTwoVariables" viz="test.viz.Method">
      <!-- example of direct specification of default visualization class
           as an attribute to a var tag  -->
      <param name="param1" type= "float" viz="test.viz.Float"/>
      <param name="param2" type= "char" viz="test.viz.Char"/>
      <var name="label" viz="test.viz.String"/>
      <var name="i" viz="test.viz.Int"/>
      <var name="j" viz="test.viz.Int"/>
    </method>
  </type>
  <!-- example of type tag without any specification of a visualization class
       i.e.  the default visualization will be used, needed for special 
       specification of a visualization in nested tags -->
  <type name="test.Test2">
	<!-- Error field -->
    <!-- field name = "field1" viz="test.viz.Int" -->
    <method name="methodWith2Params2Vars" viz="test.viz.Method">
      <param name="param1" type = "float" viz="test.viz.Float"/>
      <param name="param2" type = "char" viz="test.viz.Char"/>
      <var name="label" viz="test.viz.String"/>
      <var name="i" viz="test.viz.Int"/>
      <var name="j" viz="test.viz.Int"/>
    </method>
    <!-- example of inner type specifications -->
    <type name="test.Test2.Inner1Field1MethodWith1Param1Var" viz="test.viz.InnerClassObject">
      <field name="field1" viz="test.viz.String"/>
      <method name="method1With1Param1Var" viz="test.viz.Method">
        <param name="param" type = "double" viz="test.viz.Float"/>
        <var name="i" viz="test.viz.Int"/>
      </method> 
    </type>
    <type name="test.Test2.Inner2OverloadedMethodsOneWith1ParamOneWith1Var" viz="test.viz.InnerClassObject">
      <method name="methodOverloaded">
        <param name="param" type = "double" viz="test.viz.Float"/>
      </method>
      <method name="methodOverloaded" viz="test.viz.Method"/>
    </type>
    <type name="test.Test2.InnerOnlyClass" viz="test.viz.InnerClassObject"/>
  </type>
</soft-viz>